VCS: A Version Control System (VCS) is a tool that tracks and manages changes to files, enabling collaboration and rollback.
Git: A distributed version controll system enabling seamless colaboration among developers.
Why is Git Needed?
Collaboration:
Multiple developers can work on the same codebase without overwriting each otherâ€™s work.
Pull requests and code reviews improve the quality of contributions.

Backup and Recovery:Keeps a complete history of changes, making it possible to restore previous versions of files.
Branch Management: Enables development on multiple features simultaneously without affecting the main project.
Auditability:Logs every change, showing who made it, when, and why (with commit messages).
Efficiency in Development:Simplifies the process of updating and sharing code.
Helps in identifying and resolving conflicts in the codebase quickly.
Examples of When Git is Used
Team Collaboration: Developers working on a project like building a website or application.
Open Source Projects: Git is the backbone of platforms like GitHub, where developers worldwide contribute to projects.
Experimentation: Developers can try new ideas on branches without disrupting the main code.
Git is an essential tool for modern software development, ensuring that projects are scalable, maintainable, and collaborative.

## Setting Up Your User Information in Git:
To configure Git, you need to provide your name and email. This is important because every commit will store this information.

## Setting Your Name and Email
Use the following commands:

Set your name:
git config --global user.name "Your Name"
Set your email:
git config --global user.email "your.email@example.com"
Example:
git config --global user.name "Rahim Ahmed"
git config --global user.email "rahim.ahmed@example.com"
2. Verifying Your Configuration
To check if your Git configuration is correct, run:
git config --list
Example Output:
user.name=Rahim Ahmed
user.email=rahim.ahmed@example.com
3. Setting the Default Branch Name (Optional)
Git's default branch name has changed from master to main. To set it explicitly, use:
git config --global init.defaultBranch main

## Successfully Installing and Configuring Git
Now you can start using Git in your project.

Initialize a new repository:
git init
Stage files:
git add <file-name>
Commit changes:
git commit -m "Your commit message"
ðŸ”¹ Important Tips
* Your Git configuration is stored in the ~/.gitconfig file.
* If you need to update your configuration, simply rerun the git config commands.
* Now you are ready to manage your code with Git!

** The tree Command in Linux/Unix

The tree command in Linux/Unix displays the directory structure in a hierarchical (tree-like) format. It helps visualize the arrangement of files and folders within a directory.

Installing tree (if not already installed)
If the tree command is not available on Ubuntu, you can install it using:

sudo apt update  
sudo apt install tree  
Example Output
Running tree .git/ may produce an output like this:

.
â”œâ”€â”€ README.md
â”œâ”€â”€ src
â”‚   â”œâ”€â”€ app.py
â”‚   â””â”€â”€ utils.py
â””â”€â”€ .git
    â”œâ”€â”€ config
    â”œâ”€â”€ HEAD
    â””â”€â”€ objects

#Git Workflow:

Here's a diagram visually illustrating the Git workflow. It shows the sequence of steps involved in Git, including:
Working Directory: Where files are created or modified.
Staging Area: Files are added here using git add.
Local Repository: Changes are committed here using git commit.
Remote Repository: Changes are pushed here using git push.


### Steps to Add a File in Git (Edit, Stage, Commit, and Push)
When you modify a file in Git, you need to add it to the staging area before committing. Below is a step-by-step guide:

1. Edit the File
Open and edit the file using Vim:


vim test.txt
After editing, save and exit:

Exit without saving: :q!
Save and exit (alternative): Esc + :wq!
2. Check Git Status
Check if the file is untracked or modified:

git status
3. Stage the File
Add the file to the staging area:

git add test.txt
Now, running git status will show that the file is staged.

4. Commit the File
Commit the file with a meaningful message:
git commit -m "Edited test.txt"
5. Push to Remote Repository (If Needed)
If you need to push the file to GitHub or any other remote repository:
git push origin main
(Replace main with your branch name if it's different, e.g., master.)

This is how you edit, stage, commit, and push a file in Git.
